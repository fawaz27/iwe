import request from 'supertest';
import { EsablishmentController } from './establishment.controller';

describe('EstablishmentController', () => {
  let establishmentController: EsablishmentController;

  beforeEach(() => {
    establishmentController = new EsablishmentController();
  });

  describe('/GET all establishments', () => {
    it('should get all establishments', async () => {
      const mockEtablishments = [{ id: 1, name: 'Establishment 1' }, { id: 2, name: 'Establishment 2' }];
      jest.spyOn(establishmentController.etsService, 'getAllEtablishment').mockResolvedValue(mockEtablishments);

      const res = await request(establishmentController.router).get(establishmentController.path);

      expect(res.status).toBe(200);
      expect(res.body).toEqual(mockEtablishments);
      expect(establishmentController.etsService.getAllEtablishment).toHaveBeenCalled();
    });
  });

  describe('/POST establishment', () => {
    it('should create a new establishment', async () => {
      const mockEstablishment = { id: 3, name: 'Establishment 3' };
      jest.spyOn(establishmentController.etsService, 'createEtablishment').mockResolvedValue(mockEstablishment);

      const res = await request(establishmentController.router)
        .post(establishmentController.path)
        .send({ name: 'Establishment 3' });

      expect(res.status).toBe(201);
      expect(res.body).toEqual(mockEstablishment);
      expect(establishmentController.etsService.createEtablishment).toHaveBeenCalledWith({ name: 'Establishment 3' });
    });
  });

  describe('/GET establishment by ID', () => {
    it('should get establishment by ID', async () => {
      const mockEstablishment = { id: 1, name: 'Establishment 1' };
      jest.spyOn(establishmentController.etsService, 'getEtablishmentById').mockResolvedValue(mockEstablishment);

      const res = await request(establishmentController.router).get(`${establishmentController.path}/1`);

      expect(res.status).toBe(200);
      expect(res.body).toEqual(mockEstablishment);
      expect(establishmentController.etsService.getEtablishmentById).toHaveBeenCalledWith(1);
    });
  });

  describe('/PUT establishment', () => {
    it('should update an establishment', async () => {
      const mockEstablishment = { id: 1, name: 'Establishment 1' };
      jest.spyOn(establishmentController.etsService, 'updateEtablishment').mockResolvedValue(mockEstablishment);

      const res = await request(establishmentController.router)
        .put(`${establishmentController.path}/1`)
        .send({ name: 'Updated Establishment 1' });

      expect(res.status).toBe(200);
      expect(res
