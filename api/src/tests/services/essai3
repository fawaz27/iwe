import express from 'express';
import request from 'supertest';
import { AuthentificationController } from './authentification.controller';
import { AuthentificationService } from '../services/authentification.service';

jest.mock('../services/authentification.service');
const mockAuthService = AuthentificationService as jest.Mocked<typeof AuthentificationService>;

describe('AuthentificationController', () => {
  let app: express.Application;
  let authController: AuthentificationController;

  beforeEach(() => {
    app = express();
    authController = new AuthentificationController();
    app.use(authController.router);
  });

  describe('POST /auth/register', () => {
    it('should return a 201 status and the created teacher', async () => {
      const mockTeacher = { id: 1, name: 'John' };
      mockAuthService.register.mockResolvedValue(mockTeacher);

      const response = await request(app).post('/auth/register').send({ name: 'John' });

      expect(response.status).toBe(201);
      expect(response.body).toEqual(mockTeacher);
    });

    it('should return a 500 status and an error message if there is a problem registering the teacher', async () => {
      mockAuthService.register.mockRejectedValue(new Error('Error registering the teacher'));

      const response = await request(app).post('/auth/register').send({ name: 'John' });

      expect(response.status).toBe(500);
      expect(response.body).toEqual({ message: 'Error registering the teacher' });
    });
  });

  describe('POST /auth/login', () => {
    it('should return a 200 status and the result of the login', async () => {
      const mockResult = { id: 1, name: 'John' };
      const mockCookie = 'some-cookie';
      mockAuthService.logIn.mockResolvedValue({ cookie: mockCookie, result: mockResult });

      const response = await request(app).post('/auth/login').send({ username: 'John', password: 'password' });

      expect(response.status).toBe(200);
      expect(response.headers['set-cookie']).toEqual([mockCookie]);
      expect(response.body).toEqual(mockResult);
    });

    it('should return a 500 status and an error message if there is a problem logging in', async () => {
      mockAuthService.logIn.mockRejectedValue(new Error('Error logging in'));

      const response = await request(app).post('/auth/login').send({ username: 'John', password: 'password' });

      expect(response.status).toBe(500);
      expect(response.body).toEqual({ message: 'Error logging in' });
    });
  });

  describe('POST /auth/logout', () => {
    it('should return a 200 status', async () => {
      const mockCookie = 'some-cookie';
      mockAuthService.logOut.mockRes
